#!/bin/bash
#
# setup-tpch-db
#
# A script for setting up a MonetDB database containing the schema for
# the US Department of Transport's on-time flight statistics, for the benchmark
# described here:
#
# https://www.percona.com/blog/2009/10/02/analyzing-air-traffic-performance-with-infobright-and-monetdb/
#
# Must be run after MonetDB itself has been properly installed
#
# By Eyal Rozenberg <E.Rozenberg@cwi.nl>
#


#---------------------------------------
# Constants and defaults

today=$(date +%Y-%m-%d)
this_year=$(date +%-Y)
this_month=$(date +%-m)
first_year_with_data=1987
first_month_with_data=1
publication_delay_months=2 # check that!
last_year_with_data=$(( this_month > publication_delay_months ? this_year : this_year - 1))
last_month_with_data=$(( this_month > publication_delay_months ? this_month - publication_delay_months : this_month + 12 - publication_delay_months ))
estimated_data_per_month_mb=200
download_dir="$PWD/usdt-ontime-downloads"
db_name="usdt-ontime"
table_name="ontime"
port=50000
empty_as_null=1 # NOT NULL'ing columns is currently unsupported due to trouble with missing integer values
mask_unexpected_chars=1 # Some string fields have non-ASCII characters, obviouslly erroneous

#------------------------------
# Helper functions

function usage {
	AUTHOR="Eyal Rozenberg"
	CONTACT_EMAIL="E.Rozenberg@cwi.nl"
	echo "Usage: $0 [OPTIONS]..."
	echo "Create and load up a MonetDB database of the US Department of Transport's On-Time "
	echo "perfromance data collected by the Beureau of Transport Statistics (and availabe "
	echo "on their website: http://www.transtats.bts.gov/DL_SelectFields.asp?Table_ID=236 )"
	echo
	echo "Options:"
	echo "  -r, --recreate           If the benchmark database exists, recreate it, dropping all"
	echo "                           existing data. (If neither recreate nor append are set, the "
	echo "                           database be missing.)"
	echo "  -a, --append             If the benchmark database exists, append to it rather than"
	echo "                           recreating it. (If neither recreate nor append are set, the "
	echo "                           database be missing.)"
	echo "  -d, --db-name NAME       Name of the database holding on-time performance data"
	echo "  -f, --db-farm PATH       Filesystem path for the root directory of the MonetDB"
	echo "                           database farm in which to place the database"
	echo "  -p, --port NUMBER        IP port on which to connect to the database"
	echo "  -k, --keep-downloads     Keep the zipped CSV files downloaded from the US department"
	echo "                           of transport's website after loading their contents into the DB"
	echo "  -K, --keep-csv-files     Keep the unzipped (and possibly cleaned and re-sorted) CSV files"
	echo "                           after loading them into the DB"
	echo "  -s, --fix-sort-order     The order of appearance of records in the CSV files is not-uniform;"
	echo "                           With this option (on by default) the CSVs will be resorted,"
	echo "                           all by the same fixed order."
	echo "  -i, --ignore-sort-order  The order of appearance of records in the CSV files is not-uniform;"
	echo "                           With this option, ) the CSVs will be loaded as-is"
	echo "  -v, --verbose            Be verbose about actions taken and current status"
	echo "  -h, --help               Print usage information"
#	echo "  -n, --empty-as-null      Interpret empty fields as having a null value (rather than"
#	echo "                           an empty string or a 0 integer value)"
	echo "  -D, --download-dir       Directory into which individual monthly data file will be"
	echo "                           downloaded and decompressed before being loaded into the DB"
	echo "                           (default: $download_dir)"
	echo "  --first-year YEAR        First year for which to download data"
	echo "  --first-month MONTH      First month in first year for which to download data"
	echo "  --last-year YEAR         Last year for which to download data"
	echo "  --last-month MONTH       Last month in last year for which to download data"
	echo
	echo "For questions and details, contact $AUTHOR <$CONTACT_EMAIL> (or just read the source)."
}

function die {
	echo $1 >&2   # error message to stderr
	exit ${2:-1}  # default exit code is -1 but you can specify something else
}

function mb_available_space_for_dir {
	# Note this returns the number of 2^30 bytes, not 10^9
	 df --block-size=M --output=avail $1 | tail -1 | grep -o "[0-9]*"
}

function is_positive_int {
	[[ $1 =~ ^[0-9]+$ ]] && [[ ! $1 =~ ^0+$ ]]
}

# (monetdb's command-line utilities are not so great
# at reporting the status of things in machine-readable format)

function db_farm_exists {
	[[ $(monetdbd get all $1 2>/dev/null | wc -l)  -ne 0 ]]
}

function property_of_dbfarm {
	local property_name="$1"
	local db_farm="$2"
	monetdbd get $property_name $db_farm | tail -1 | sed "s/$property_name *//;"
}

function db_farm_is_up {
	db_farm="$1"
	# When a DB farm is up, the status is "monetdbd[process num here] version here (release name here) is serving this dbfarm";
	# when it's down, the status is "no monetdbd is serving this dbfarm"
	[[ $(property_of_dbfarm status $1) =~ "monetdbd[" ]]
}

function db_is_up {
	# This assumes the DB exists
	local db_name=$1
	[[ "$be_verbose" ]] && echo monetdb -p $port status $db_name
	status=$(monetdb -p $port status $db_name 2>/dev/null | tail -1 | sed -r 's/^'$db_name'\s*([^ ]*).*$/\1/;')
	[[ "$be_verbose" ]] && echo "Database $db_name is" $(echo $status | sed 's/R/running/; s/S/not running/; s/^$/not running/')
	[[ -n "$status" && $status == "R" ]] && return 0 || return 1
}

function db_exists {
	local db_name=$1
	local port=$2
	[[ $(monetdb -p $port status $db_name 2>/dev/null | wc -l) > 0 ]]
}

function run_mclient {
	local language="sql"
	local query="$1"
	local format="${2:-csv}"
	[[ $be_verbose ]] && echo "mclient -lsql -f $format -d $db_name -p $port -s \"$query\""
	mclient -lsql -f $format -d $db_name -p $port -s "$query"
}

function is_number {
   echo "$1" | egrep -q '^\-?[0-9]+$' && return 0 || return 1
}

function has_more_than_one_line {
	( read -r && read -r ) < "$1" && return 0 || return 1
}

function get_and_load_month_data {
	local year=$1
	local month=$2
	local url_prefix="https://transtats.bts.gov/PREZIP/"
	local filename_prefix="On_Time_On_Time_Performance"
	local zip_file="${filename_prefix}_${year}_${month}.zip"
	local csv_file="${zip_file/zip/csv}"
	local quiet_switch=
	local nproc_result=$(nproc)
	local num_processors=${nproc_result:-1}
	local char_masking_sed_command
	local remove_flightnum_quotes_sed_command
	local sort_command
	[[ "$mask_unexpected_chars" ]] && char_masking_sed_command='s/,[^,]*[\xE0-\xEF][^,]*,/,,/; '
	# Sorting by fields 4, 7, 11, 12, 21 - DayOfMonth, UniqueCarrier, FlightNum, OriginAirportID, DestAirportID
	# Actually, the files themselves are typically not in this keying order (e.g. carrier before dayofmonth) - but
	# they are not in a uniform consistent order, not even within individual files; so I'm keying essentially
	# by the fields in order (ignoring derivable fields such as FlightDate and DayOfWeek)
	[[ "$fix_csv_sort_order" ]] && sort_pipe_element="sort --parallel=$num_processors -t, -k4,4n -k7,7 -k11,11n -k12,12n -k21,21n -" || sort_pipe_element="cat"
	# The flight number field is usually/always within quotes. We could skip the first quote, but then - if someday the line numbers
	# stop having quotes we'll be in a bind
	[[ "$fix_csv_sort_order" ]] && remove_flightnum_quotes_sed_command='s/^(([^,]*,){10})"([0-9]+)"/\1\3/; '
	[[ "$be_verbose" ]] || quiet_switch="-q"
	pushd $download_dir > /dev/null
	[[ "$be_verbose" ]] && echo "wget -c \"${url_prefix}${zip_file}\""
	wget -c $quiet_switch "${url_prefix}${zip_file}"
	[[ "$be_verbose" ]] && echo "unzip -p -o \"$zip_file\" \"$csv_file\" | tail -n +2 | LC_ALL=C sed 's/\.00,/,/g; s/\xE4NKNO\xE6/UNKNOW/;'${char_masking_sed_command}$remove_flightnum_quotes_sed_command}' | $sort_pipe_element > \"$csv_file\""
	# The \x stuff is to clean character ertries involving invalid octets for UTF-8. The sort command is due to the fact that not all CSV files follow the smae sort key
	# The tail command is used to drop the header line
	unzip -p $quiet_switch -o "$zip_file" "$csv_file" | tail -n +2 | LC_ALL=C sed -r 's/\.00,/,/g; s/\xE4NKNO\xE6/UNKNOW/; '"${char_masking_sed_command}${remove_flightnum_quotes_sed_command}" | $sort_pipe_element  > "$csv_file"

	if has_more_than_one_line "$csv_file"; then
		[[ "$empty_as_null" ]] && null_as_clause=" NULL AS ''"
		run_mclient "COPY INTO $table_name FROM '$download_dir/$csv_file' USING DELIMITERS ',','\n','\"' ${null_as_clause};"
	else
		if [[ "$be_verbose" ]]; then
			echo -n "CSV file for year ${year} month ${month}"
			if [[ -s "$csv_file" ]]; then
				echo -n " is empty (no header line)"
			else
				echo -n " only has one line (presumably the header)"
			fi
			echo " - so not loading it."
		fi
	fi
	[[ $keep_csv_files ]] || rm "$csv_file" 2>&1
	[[ $keep_downloads ]] || rm "$zip_file" 2>&1
	popd > /dev/null
}

#------------------------------

schema_creation_sql='CREATE TABLE ontime ( Year_ SMALLINT NOT NULL, Quarter TINYINT NOT NULL, Month_ TINYINT NOT NULL, DayofMonth TINYINT NOT NULL, DayOfWeek TINYINT NOT NULL, FlightDate DATE NOT NULL, UniqueCarrier VARCHAR(6) NOT NULL, AirlineID INT NOT NULL, Carrier CHAR(2) NOT NULL, TailNum VARCHAR(6) DEFAULT NULL, FlightNum SMALLINT NOT NULL, OriginAirportID INT NOT NULL, OriginAirportSeqID INT NOT NULL, OriginCityMarketID INT NOT NULL, Origin CHAR(3) NOT NULL, OriginCityName VARCHAR(40) NOT NULL, OriginState CHAR(2) DEFAULT NULL, OriginStateFips CHAR(2) DEFAULT NULL, OriginStateName VARCHAR(48) DEFAULT NULL, OriginWac SMALLINT NOT NULL, DestAirportID INT NOT NULL, DestAirportSeqID INT NOT NULL, DestCityMarketID INT NOT NULL, Dest CHAR(3) NOT NULL, DestCityName VARCHAR(40) NOT NULL, DestState CHAR(2) DEFAULT NULL, DestStateFips CHAR(2) DEFAULT NULL, DestStateName VARCHAR(48) DEFAULT NULL, DestWac SMALLINT NOT NULL, CRSDepTime SMALLINT NOT NULL, DepTime SMALLINT DEFAULT NULL, DepDelay SMALLINT DEFAULT NULL, DepDelayMinutes SMALLINT DEFAULT NULL, DepDel15 BOOLEAN DEFAULT NULL, DepartureDelayGroups TINYINT DEFAULT NULL, DepTimeBlk CHAR(9) NOT NULL, TaxiOut SMALLINT DEFAULT NULL, WheelsOff CHAR(4) DEFAULT NULL, WheelsOn CHAR(4) DEFAULT NULL, TaxiIn SMALLINT DEFAULT NULL, CRSArrTime SMALLINT DEFAULT NULL, ArrTime CHAR(4) DEFAULT NULL, ArrDelay INT DEFAULT NULL, ArrDelayMinutes INT DEFAULT NULL, ArrDel15 BOOLEAN DEFAULT NULL, ArrivalDelayGroups INT DEFAULT NULL, ArrTimeBlk CHAR(9) NOT NULL, Cancelled BOOLEAN NOT NULL, CancellationCode CHAR(1) DEFAULT NULL, Diverted BOOLEAN NOT NULL, CRSElapsedTime SMALLINT DEFAULT NULL, ActualElapsedTime SMALLINT DEFAULT NULL, AirTime SMALLINT DEFAULT NULL, Flights INT NOT NULL, Distance INT NOT NULL, DistanceGroup TINYINT NOT NULL, CarrierDelay INT DEFAULT NULL, WeatherDelay INT DEFAULT NULL, NASDelay INT DEFAULT NULL, SecurityDelay INT DEFAULT NULL, LateAircraftDelay INT DEFAULT NULL, FirstDepTime CHAR(4) DEFAULT NULL, TotalAddGTime SMALLINT DEFAULT NULL, LongestAddGTime SMALLINT DEFAULT NULL, DivAirportLandings CHAR(1) DEFAULT NULL, DivReachedDest CHAR(4) DEFAULT NULL, DivActualElapsedTime SMALLINT DEFAULT NULL, DivArrDelay SMALLINT DEFAULT NULL, DivDistance SMALLINT DEFAULT NULL, Div1Airport CHAR(3) DEFAULT NULL, Div1AirportID INT DEFAULT NULL, Div1AirportSeqID INT DEFAULT NULL, Div1WheelsOn CHAR(4) DEFAULT NULL, Div1TotalGTime SMALLINT DEFAULT NULL, Div1LongestGTime SMALLINT DEFAULT NULL, Div1WheelsOff CHAR(4) DEFAULT NULL, Div1TailNum VARCHAR(6) DEFAULT NULL, Div2Airport CHAR(3) DEFAULT NULL, Div2AirportID INT DEFAULT NULL, Div2AirportSeqID INT DEFAULT NULL, Div2WheelsOn CHAR(4) DEFAULT NULL, Div2TotalGTime SMALLINT DEFAULT NULL, Div2LongestGTime SMALLINT DEFAULT NULL, Div2WheelsOff CHAR(4) DEFAULT NULL, Div2TailNum VARCHAR(6) DEFAULT NULL, Div3Airport CHAR(3) DEFAULT NULL, Div3AirportID INT DEFAULT NULL, Div3AirportSeqID INT DEFAULT NULL, Div3WheelsOn CHAR(4) DEFAULT NULL, Div3TotalGTime SMALLINT DEFAULT NULL, Div3LongestGTime SMALLINT DEFAULT NULL, Div3WheelsOff CHAR(4) DEFAULT NULL, Div3TailNum VARCHAR(6) DEFAULT NULL, Div4Airport CHAR(3) DEFAULT NULL, Div4AirportID INT DEFAULT NULL, Div4AirportSeqID INT DEFAULT NULL, Div4WheelsOn CHAR(4) DEFAULT NULL, Div4TotalGTime SMALLINT DEFAULT NULL, Div4LongestGTime SMALLINT DEFAULT NULL, Div4WheelsOff CHAR(4) DEFAULT NULL, Div4TailNum VARCHAR(6) DEFAULT NULL, Div5Airport CHAR(3) DEFAULT NULL, Div5AirportID INT DEFAULT NULL, Div5AirportSeqID INT DEFAULT NULL, Div5WheelsOn CHAR(4) DEFAULT NULL, Div5TotalGTime SMALLINT DEFAULT NULL, Div5LongestGTime SMALLINT DEFAULT NULL, Div5WheelsOff CHAR(4) DEFAULT NULL, Div5TailNum VARCHAR(6) DEFAULT NULL );'


#------------------------------
# Parse command line here
#

while [[ $# > 0 ]]; do
	option_key="$1"
	
	case $option_key in
	-h|--help)
		usage;
		exit;
		;;
	-v|--verbose)
		be_verbose=1
		;;
	-r|--recreate)
		recreate_db=1
		;;
	-a|--append)
		append_to_db=1
		;;
	--first-month|--from-month)
		first_month="$2"
		shift # past argument
		;;
	--last-month|--to-month)
		last_month="$2"
		shift # past argument
		;;
	--first-year|--from-year)
		first_year="$2"
		shift # past argument
		;;
	--last-year|--to-year)
		last_year="$2"
		shift # past argument
		;;
	-d|--dbname|--db-name|--database-name)
		db_name="$2"
		shift # past argument
		;;
	-f|--farm|--db-farm|--dbfarm|--database-farm)
		db_farm="$2"
		shift # past argument
		;;
	-p|--port|--dbfarm-port)
		port="$2"
		shift # past argument
		is_positive_int $port || die "Invalid DB farm port $port"
		;;
	-D|--download-to|--download-dir|-dl-dir|--download-directory)
		download_dir="$2"
		shift # past argument
		;;
	-k|--keep-downloaded|--keep|--keep-downloads)
		keep_downloads=1
		;;
	-K|--keep-csv|--keep-csv-files)
	   keep_csv_files=1
	   ;;
	-s|--fix-sort-order|--fix-csv-sort-order)
		fix_csv_sort_order=1
		;;
	-i|--ignore-sort-order|--ignore-csv-sort-order)
		unset fix_csv_sort_order
		;;
	*) # unknown option
		die "Uknown command line option $option_key"
		;;
	esac
	shift # past argument or value
done
if [[ $# > 0 ]]; then
	usage
	exit -1
fi

if [[ ! "$first_year" ]]; then
	first_year=$first_year_with_data
fi

if [[ ! "$first_month" ]]; then
	first_month=$((first_year == first_year_with_data ? first_month_with_data : 1 ))
fi

if [[ ! "$last_year" ]]; then
	last_year=$last_year_with_data
fi

if [[ ! "$last_month" ]]; then
	last_month=$((last_year == last_year_with_data ? last_month_with_data : 12 ))
fi

if ! is_number $first_year || ! is_number $last_year || ! is_number $first_month || ! is_number $last_month; then
	die "Invalid year-month range ${first_year}-$first_month - ${last_year}-$last_month"
fi

if (( first_year > last_year || ( first_year == last_year && first_month > last_month ) )); then
	die "Invalid year-month range ${first_year}-$first_month - ${last_year}-$last_month"
fi

if ((first_year < first_year_with_data || (first_year == first_year_with_data && first_month < first_month_with_data) )); then
	die "No data is available from before month $first_month_with_data of year $first_year_with_data"
fi
if ((last_year > last_year_with_data || (last_year == last_year_with_data && last_month > last_month_with_data) )); then
	die "No data is available after year $last_year_with_data month $last_month_with_data (assuming a ${publication_delay_months}-month publication delay)"
fi

[[ "$be_verbose" ]] && echo "Will load monthly data from year $first_year month $first_month until year $last_year month ${last_month}, inclusive"

[[ -n "$db_farm" ]] || db_farm="$DB_FARM"
[[ -n "$db_farm" ]] || db_farm="$DBFARM"
[[ -n "$db_farm" ]] || die "A DB farm (= the directory in which to store the benchmark DB in a subdirectory) must be specified, either on the command-line (--db-farm) or in an environment variable (\$DB_FARM or \$DBFARM)"

# Command-line parsing complete

# Check for binaries

for binary in mclient monetdbd monetdb; do
	[[ -n `which $binary` ]] || die "Missing MonetDB binary $binary"
done

# Note: We don't really need that extra space, but... better be on the safe side (especially if the .tbl directory and the DB farm are on the same partition)

total_months=$((last_month + (last_year - 1 - first_year) * 12))
necessary_space_in_mb=$(( estimated_space_per_month_mb * $total_months ))
# (note: not checking for enough space for the individual CSV files)
(( $(mb_available_space_for_dir $db_farm) > $necessary_space_in_mb )) ||
die "Not enough disk space at $db_farm to load the data: We need ${necessary_space_in_mb} MiB but have $(mb_available_space_for_dir $db_farm) MiB."

[[ -d $db_farm ]] || mkdir -p $db_farm || die "Failed creating a directory for the DB farm at $db_farm"

# Ensure we have a DB farm that's up in which to create the database - or try to create it

if db_farm_exists $db_farm; then
	port=$(property_of_dbfarm "port" $db_farm)
	db_farm_is_up $db_farm || monetdbd start $db_farm || die "Could not start the DB farm at $db_farm"
else
	[[ "$be_verbose" ]] && echo "monetdbd create $db_farm"
	monetdbd create $db_farm || die "A MonetDB database farm does not exist at ${db_farm}, and cannot be created there."
	[[ -z $port ]] || port=50002
	[[ "$be_verbose" ]] && echo "monetdbd set port=$port $db_farm"
	monetdbd set port=$port $db_farm || die "Can't set the daemon port for new DB farm ${db_farm} to ${port}."
	[[ "$be_verbose" ]] && echo "monetdbd start $db_farm"
	monetdbd start $db_farm || die
fi

db_farm_is_up $db_farm || die "Could not get DB farm at $db_farm to the started state"

# So, do we actually need to create anything?

if db_exists "$db_name" "$port"; then
	if db_is_up "$db_name"; then
		[[ "$be_verbose" ]] &&  echo "monetdb -p $port stop $db_name"
		monetdb -p $port stop $db_name  >/dev/null || die "Can't stop the existing DB named $db_name in DB farm $db_farm."
	fi
	if [[ "$recreate_db" ]]; then
		[[ "$be_verbose" ]] &&  echo "monetdb -p $port destroy -f $db_name"
		monetdb -p $port destroy -f $db_name >/dev/null || die "Failed destroying the existing DB named $db_name in DB farm $db_farm."
		need_to_create_the_db=1
	elif [[ ! "$append_to_db" ]]; then
		die "A database named $db_name already exists in DB farm ${db_farm}, so giving up. Perhaps you wanted to recreate it or append to it?"
	fi
else
	need_to_create_the_db=1
fi

# Create the DB and SQL-create its schema

if [[ "$need_to_create_the_db" ]]; then
	(
	( [[ "$be_verbose" ]] && echo "monetdb -p $port create $db_name" ; monetdb -p $port create $db_name > /dev/null ) &&
	( [[ "$be_verbose" ]] && echo "monetdb -p $port release $db_name" ;  monetdb -p $port release $db_name > /dev/null )
	) || die "Failed to create (and release) a database named $db_name in DB farm $db_farm for US Deptartment of Transport on-time performance data."
	[[ $empty_as_null ]] || schema_creation_sql=$(echo $schema_creation_sql | sed -r 's/INT DEFAULT NULL/INT NOT NULL DEFAULT 0/g; s/VARCHAR\(([0-9]+)\) DEFAULT NULL/VARCHAR(\1) NOT NULL DEFAULT '\'\''/g;')
	run_mclient "$schema_creation_sql"
fi

# Now download, decompress and load the data for each month into the DB
# (note: The month part of the filename is not 0-padded)
# (note: For 1987 we have the whole year)
[[ "$be_verbose" ]] && echo "mkdir -p $download_dir"
mkdir -p $download_dir
if (($first_year == $last_year)); then
	for ((month=$first_month;month<=$last_month;month++)); do
		get_and_load_month_data $first_year $month
	done
else
	for ((month=${first_month};month<=12;month++)); do
		get_and_load_month_data $first_year $month
	done;
	for ((year=first_year+1;year<last_year;year++)); do
		for ((month=1;month<=12;month++)); do
			get_and_load_month_data $year $month
		done;
	done;
	for ((month=1;month<=$last_month;month++)); do
		get_and_load_month_data $last_year $month
	done
fi
if [[ ! "$keep_downloads" && ! "$keep_csv_files" ]]; then
	[[ "$be_verbose" ]] && echo "rmdir $download_dir"
	rmdir $download_dir
fi

